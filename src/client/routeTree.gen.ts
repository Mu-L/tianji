/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkerImport } from './routes/worker'
import { Route as WebsiteImport } from './routes/website'
import { Route as TelemetryImport } from './routes/telemetry'
import { Route as SwitchWorkspaceImport } from './routes/switchWorkspace'
import { Route as SurveyImport } from './routes/survey'
import { Route as SettingsImport } from './routes/settings'
import { Route as ServerImport } from './routes/server'
import { Route as RegisterImport } from './routes/register'
import { Route as PlaygroundImport } from './routes/playground'
import { Route as PageImport } from './routes/page'
import { Route as MonitorImport } from './routes/monitor'
import { Route as LoginImport } from './routes/login'
import { Route as FeedImport } from './routes/feed'
import { Route as ApplicationImport } from './routes/application'
import { Route as AiGatewayImport } from './routes/aiGateway'
import { Route as IndexImport } from './routes/index'
import { Route as WorkerIndexImport } from './routes/worker/index'
import { Route as TelemetryIndexImport } from './routes/telemetry/index'
import { Route as SurveyIndexImport } from './routes/survey/index'
import { Route as PageIndexImport } from './routes/page/index'
import { Route as MonitorIndexImport } from './routes/monitor/index'
import { Route as InsightsIndexImport } from './routes/insights/index'
import { Route as FeedIndexImport } from './routes/feed/index'
import { Route as ApplicationIndexImport } from './routes/application/index'
import { Route as AiGatewayIndexImport } from './routes/aiGateway/index'
import { Route as WorkerAddImport } from './routes/worker/add'
import { Route as WebsiteOverviewImport } from './routes/website/overview'
import { Route as WebsiteAddImport } from './routes/website/add'
import { Route as TelemetryAddImport } from './routes/telemetry/add'
import { Route as TelemetryTelemetryIdImport } from './routes/telemetry/$telemetryId'
import { Route as SurveyAddImport } from './routes/survey/add'
import { Route as StatusSlugImport } from './routes/status/$slug'
import { Route as SettingsWorkspaceImport } from './routes/settings/workspace'
import { Route as SettingsWarehouseImport } from './routes/settings/warehouse'
import { Route as SettingsUsageImport } from './routes/settings/usage'
import { Route as SettingsProfileImport } from './routes/settings/profile'
import { Route as SettingsNotificationsImport } from './routes/settings/notifications'
import { Route as SettingsAuditLogImport } from './routes/settings/auditLog'
import { Route as SettingsApiKeyImport } from './routes/settings/apiKey'
import { Route as PageAddImport } from './routes/page/add'
import { Route as PageSlugImport } from './routes/page/$slug'
import { Route as MonitorAddImport } from './routes/monitor/add'
import { Route as InsightsEventsImport } from './routes/insights/events'
import { Route as InsightsCohortsImport } from './routes/insights/cohorts'
import { Route as FeedPlaygroundImport } from './routes/feed_/playground'
import { Route as FeedAddImport } from './routes/feed/add'
import { Route as ApplicationOverviewImport } from './routes/application/overview'
import { Route as ApplicationCompareImport } from './routes/application/compare'
import { Route as ApplicationAddImport } from './routes/application/add'
import { Route as AiGatewayAddImport } from './routes/aiGateway/add'
import { Route as WorkerWorkerIdIndexImport } from './routes/worker/$workerId/index'
import { Route as WebsiteWebsiteIdIndexImport } from './routes/website/$websiteId/index'
import { Route as SurveySurveyIdIndexImport } from './routes/survey/$surveyId/index'
import { Route as SettingsBillingIndexImport } from './routes/settings/billing/index'
import { Route as MonitorMonitorIdIndexImport } from './routes/monitor/$monitorId/index'
import { Route as InsightsWarehouseIndexImport } from './routes/insights/warehouse/index'
import { Route as FeedChannelIdIndexImport } from './routes/feed/$channelId/index'
import { Route as ApplicationApplicationIdIndexImport } from './routes/application/$applicationId/index'
import { Route as AiGatewayGatewayIdIndexImport } from './routes/aiGateway/$gatewayId/index'
import { Route as WorkerWorkerIdEditImport } from './routes/worker/$workerId/edit'
import { Route as WebsiteVisitorMapWebsiteIdImport } from './routes/website_/visitor-map/$websiteId'
import { Route as WebsitePublicShareIdImport } from './routes/website_/public/$shareId'
import { Route as WebsiteWebsiteIdConfigImport } from './routes/website/$websiteId/config'
import { Route as SurveySurveyIdEditImport } from './routes/survey/$surveyId/edit'
import { Route as SettingsBillingHistoryImport } from './routes/settings/billing/history'
import { Route as MonitorMonitorIdEditImport } from './routes/monitor/$monitorId/edit'
import { Route as InvitationAcceptTokenImport } from './routes/invitation/accept/$token'
import { Route as FeedPublicShareIdImport } from './routes/feed_/public/$shareId'
import { Route as FeedChannelIdEditImport } from './routes/feed/$channelId/edit'
import { Route as ApplicationApplicationIdEditImport } from './routes/application/$applicationId/edit'
import { Route as AiGatewayGatewayIdEditImport } from './routes/aiGateway/$gatewayId/edit'
import { Route as InsightsWarehouseConnectionsIndexImport } from './routes/insights/warehouse/connections/index'
import { Route as InsightsWarehouseConnectionsCreateImport } from './routes/insights/warehouse/connections/create'
import { Route as InsightsWarehouseConnectionsConnectionIdTableImport } from './routes/insights/warehouse/connections/$connectionId/table'

// Create/Update Routes

const WorkerRoute = WorkerImport.update({
  path: '/worker',
  getParentRoute: () => rootRoute,
} as any)

const WebsiteRoute = WebsiteImport.update({
  path: '/website',
  getParentRoute: () => rootRoute,
} as any)

const TelemetryRoute = TelemetryImport.update({
  path: '/telemetry',
  getParentRoute: () => rootRoute,
} as any)

const SwitchWorkspaceRoute = SwitchWorkspaceImport.update({
  path: '/switchWorkspace',
  getParentRoute: () => rootRoute,
} as any)

const SurveyRoute = SurveyImport.update({
  path: '/survey',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ServerRoute = ServerImport.update({
  path: '/server',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundRoute = PlaygroundImport.update({
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const PageRoute = PageImport.update({
  path: '/page',
  getParentRoute: () => rootRoute,
} as any)

const MonitorRoute = MonitorImport.update({
  path: '/monitor',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FeedRoute = FeedImport.update({
  path: '/feed',
  getParentRoute: () => rootRoute,
} as any)

const ApplicationRoute = ApplicationImport.update({
  path: '/application',
  getParentRoute: () => rootRoute,
} as any)

const AiGatewayRoute = AiGatewayImport.update({
  path: '/aiGateway',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkerIndexRoute = WorkerIndexImport.update({
  path: '/',
  getParentRoute: () => WorkerRoute,
} as any)

const TelemetryIndexRoute = TelemetryIndexImport.update({
  path: '/',
  getParentRoute: () => TelemetryRoute,
} as any)

const SurveyIndexRoute = SurveyIndexImport.update({
  path: '/',
  getParentRoute: () => SurveyRoute,
} as any)

const PageIndexRoute = PageIndexImport.update({
  path: '/',
  getParentRoute: () => PageRoute,
} as any)

const MonitorIndexRoute = MonitorIndexImport.update({
  path: '/',
  getParentRoute: () => MonitorRoute,
} as any)

const InsightsIndexRoute = InsightsIndexImport.update({
  path: '/insights/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIndexRoute = FeedIndexImport.update({
  path: '/',
  getParentRoute: () => FeedRoute,
} as any)

const ApplicationIndexRoute = ApplicationIndexImport.update({
  path: '/',
  getParentRoute: () => ApplicationRoute,
} as any)

const AiGatewayIndexRoute = AiGatewayIndexImport.update({
  path: '/',
  getParentRoute: () => AiGatewayRoute,
} as any)

const WorkerAddRoute = WorkerAddImport.update({
  path: '/add',
  getParentRoute: () => WorkerRoute,
} as any)

const WebsiteOverviewRoute = WebsiteOverviewImport.update({
  path: '/overview',
  getParentRoute: () => WebsiteRoute,
} as any)

const WebsiteAddRoute = WebsiteAddImport.update({
  path: '/add',
  getParentRoute: () => WebsiteRoute,
} as any)

const TelemetryAddRoute = TelemetryAddImport.update({
  path: '/add',
  getParentRoute: () => TelemetryRoute,
} as any)

const TelemetryTelemetryIdRoute = TelemetryTelemetryIdImport.update({
  path: '/$telemetryId',
  getParentRoute: () => TelemetryRoute,
} as any)

const SurveyAddRoute = SurveyAddImport.update({
  path: '/add',
  getParentRoute: () => SurveyRoute,
} as any)

const StatusSlugRoute = StatusSlugImport.update({
  path: '/status/$slug',
  getParentRoute: () => rootRoute,
} as any)

const SettingsWorkspaceRoute = SettingsWorkspaceImport.update({
  path: '/workspace',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsWarehouseRoute = SettingsWarehouseImport.update({
  path: '/warehouse',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsUsageRoute = SettingsUsageImport.update({
  path: '/usage',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsProfileRoute = SettingsProfileImport.update({
  path: '/profile',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsNotificationsRoute = SettingsNotificationsImport.update({
  path: '/notifications',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsAuditLogRoute = SettingsAuditLogImport.update({
  path: '/auditLog',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsApiKeyRoute = SettingsApiKeyImport.update({
  path: '/apiKey',
  getParentRoute: () => SettingsRoute,
} as any)

const PageAddRoute = PageAddImport.update({
  path: '/add',
  getParentRoute: () => PageRoute,
} as any)

const PageSlugRoute = PageSlugImport.update({
  path: '/$slug',
  getParentRoute: () => PageRoute,
} as any)

const MonitorAddRoute = MonitorAddImport.update({
  path: '/add',
  getParentRoute: () => MonitorRoute,
} as any)

const InsightsEventsRoute = InsightsEventsImport.update({
  path: '/insights/events',
  getParentRoute: () => rootRoute,
} as any)

const InsightsCohortsRoute = InsightsCohortsImport.update({
  path: '/insights/cohorts',
  getParentRoute: () => rootRoute,
} as any)

const FeedPlaygroundRoute = FeedPlaygroundImport.update({
  path: '/feed/playground',
  getParentRoute: () => rootRoute,
} as any)

const FeedAddRoute = FeedAddImport.update({
  path: '/add',
  getParentRoute: () => FeedRoute,
} as any)

const ApplicationOverviewRoute = ApplicationOverviewImport.update({
  path: '/overview',
  getParentRoute: () => ApplicationRoute,
} as any)

const ApplicationCompareRoute = ApplicationCompareImport.update({
  path: '/compare',
  getParentRoute: () => ApplicationRoute,
} as any)

const ApplicationAddRoute = ApplicationAddImport.update({
  path: '/add',
  getParentRoute: () => ApplicationRoute,
} as any)

const AiGatewayAddRoute = AiGatewayAddImport.update({
  path: '/add',
  getParentRoute: () => AiGatewayRoute,
} as any)

const WorkerWorkerIdIndexRoute = WorkerWorkerIdIndexImport.update({
  path: '/$workerId/',
  getParentRoute: () => WorkerRoute,
} as any)

const WebsiteWebsiteIdIndexRoute = WebsiteWebsiteIdIndexImport.update({
  path: '/$websiteId/',
  getParentRoute: () => WebsiteRoute,
} as any)

const SurveySurveyIdIndexRoute = SurveySurveyIdIndexImport.update({
  path: '/$surveyId/',
  getParentRoute: () => SurveyRoute,
} as any)

const SettingsBillingIndexRoute = SettingsBillingIndexImport.update({
  path: '/billing/',
  getParentRoute: () => SettingsRoute,
} as any)

const MonitorMonitorIdIndexRoute = MonitorMonitorIdIndexImport.update({
  path: '/$monitorId/',
  getParentRoute: () => MonitorRoute,
} as any)

const InsightsWarehouseIndexRoute = InsightsWarehouseIndexImport.update({
  path: '/insights/warehouse/',
  getParentRoute: () => rootRoute,
} as any)

const FeedChannelIdIndexRoute = FeedChannelIdIndexImport.update({
  path: '/$channelId/',
  getParentRoute: () => FeedRoute,
} as any)

const ApplicationApplicationIdIndexRoute =
  ApplicationApplicationIdIndexImport.update({
    path: '/$applicationId/',
    getParentRoute: () => ApplicationRoute,
  } as any)

const AiGatewayGatewayIdIndexRoute = AiGatewayGatewayIdIndexImport.update({
  path: '/$gatewayId/',
  getParentRoute: () => AiGatewayRoute,
} as any)

const WorkerWorkerIdEditRoute = WorkerWorkerIdEditImport.update({
  path: '/$workerId/edit',
  getParentRoute: () => WorkerRoute,
} as any)

const WebsiteVisitorMapWebsiteIdRoute = WebsiteVisitorMapWebsiteIdImport.update(
  {
    path: '/website/visitor-map/$websiteId',
    getParentRoute: () => rootRoute,
  } as any,
)

const WebsitePublicShareIdRoute = WebsitePublicShareIdImport.update({
  path: '/website/public/$shareId',
  getParentRoute: () => rootRoute,
} as any)

const WebsiteWebsiteIdConfigRoute = WebsiteWebsiteIdConfigImport.update({
  path: '/$websiteId/config',
  getParentRoute: () => WebsiteRoute,
} as any)

const SurveySurveyIdEditRoute = SurveySurveyIdEditImport.update({
  path: '/$surveyId/edit',
  getParentRoute: () => SurveyRoute,
} as any)

const SettingsBillingHistoryRoute = SettingsBillingHistoryImport.update({
  path: '/billing/history',
  getParentRoute: () => SettingsRoute,
} as any)

const MonitorMonitorIdEditRoute = MonitorMonitorIdEditImport.update({
  path: '/$monitorId/edit',
  getParentRoute: () => MonitorRoute,
} as any)

const InvitationAcceptTokenRoute = InvitationAcceptTokenImport.update({
  path: '/invitation/accept/$token',
  getParentRoute: () => rootRoute,
} as any)

const FeedPublicShareIdRoute = FeedPublicShareIdImport.update({
  path: '/feed/public/$shareId',
  getParentRoute: () => rootRoute,
} as any)

const FeedChannelIdEditRoute = FeedChannelIdEditImport.update({
  path: '/$channelId/edit',
  getParentRoute: () => FeedRoute,
} as any)

const ApplicationApplicationIdEditRoute =
  ApplicationApplicationIdEditImport.update({
    path: '/$applicationId/edit',
    getParentRoute: () => ApplicationRoute,
  } as any)

const AiGatewayGatewayIdEditRoute = AiGatewayGatewayIdEditImport.update({
  path: '/$gatewayId/edit',
  getParentRoute: () => AiGatewayRoute,
} as any)

const InsightsWarehouseConnectionsIndexRoute =
  InsightsWarehouseConnectionsIndexImport.update({
    path: '/insights/warehouse/connections/',
    getParentRoute: () => rootRoute,
  } as any)

const InsightsWarehouseConnectionsCreateRoute =
  InsightsWarehouseConnectionsCreateImport.update({
    path: '/insights/warehouse/connections/create',
    getParentRoute: () => rootRoute,
  } as any)

const InsightsWarehouseConnectionsConnectionIdTableRoute =
  InsightsWarehouseConnectionsConnectionIdTableImport.update({
    path: '/insights/warehouse/connections/$connectionId/table',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/aiGateway': {
      preLoaderRoute: typeof AiGatewayImport
      parentRoute: typeof rootRoute
    }
    '/application': {
      preLoaderRoute: typeof ApplicationImport
      parentRoute: typeof rootRoute
    }
    '/feed': {
      preLoaderRoute: typeof FeedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/monitor': {
      preLoaderRoute: typeof MonitorImport
      parentRoute: typeof rootRoute
    }
    '/page': {
      preLoaderRoute: typeof PageImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/server': {
      preLoaderRoute: typeof ServerImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/survey': {
      preLoaderRoute: typeof SurveyImport
      parentRoute: typeof rootRoute
    }
    '/switchWorkspace': {
      preLoaderRoute: typeof SwitchWorkspaceImport
      parentRoute: typeof rootRoute
    }
    '/telemetry': {
      preLoaderRoute: typeof TelemetryImport
      parentRoute: typeof rootRoute
    }
    '/website': {
      preLoaderRoute: typeof WebsiteImport
      parentRoute: typeof rootRoute
    }
    '/worker': {
      preLoaderRoute: typeof WorkerImport
      parentRoute: typeof rootRoute
    }
    '/aiGateway/add': {
      preLoaderRoute: typeof AiGatewayAddImport
      parentRoute: typeof AiGatewayImport
    }
    '/application/add': {
      preLoaderRoute: typeof ApplicationAddImport
      parentRoute: typeof ApplicationImport
    }
    '/application/compare': {
      preLoaderRoute: typeof ApplicationCompareImport
      parentRoute: typeof ApplicationImport
    }
    '/application/overview': {
      preLoaderRoute: typeof ApplicationOverviewImport
      parentRoute: typeof ApplicationImport
    }
    '/feed/add': {
      preLoaderRoute: typeof FeedAddImport
      parentRoute: typeof FeedImport
    }
    '/feed/playground': {
      preLoaderRoute: typeof FeedPlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/insights/cohorts': {
      preLoaderRoute: typeof InsightsCohortsImport
      parentRoute: typeof rootRoute
    }
    '/insights/events': {
      preLoaderRoute: typeof InsightsEventsImport
      parentRoute: typeof rootRoute
    }
    '/monitor/add': {
      preLoaderRoute: typeof MonitorAddImport
      parentRoute: typeof MonitorImport
    }
    '/page/$slug': {
      preLoaderRoute: typeof PageSlugImport
      parentRoute: typeof PageImport
    }
    '/page/add': {
      preLoaderRoute: typeof PageAddImport
      parentRoute: typeof PageImport
    }
    '/settings/apiKey': {
      preLoaderRoute: typeof SettingsApiKeyImport
      parentRoute: typeof SettingsImport
    }
    '/settings/auditLog': {
      preLoaderRoute: typeof SettingsAuditLogImport
      parentRoute: typeof SettingsImport
    }
    '/settings/notifications': {
      preLoaderRoute: typeof SettingsNotificationsImport
      parentRoute: typeof SettingsImport
    }
    '/settings/profile': {
      preLoaderRoute: typeof SettingsProfileImport
      parentRoute: typeof SettingsImport
    }
    '/settings/usage': {
      preLoaderRoute: typeof SettingsUsageImport
      parentRoute: typeof SettingsImport
    }
    '/settings/warehouse': {
      preLoaderRoute: typeof SettingsWarehouseImport
      parentRoute: typeof SettingsImport
    }
    '/settings/workspace': {
      preLoaderRoute: typeof SettingsWorkspaceImport
      parentRoute: typeof SettingsImport
    }
    '/status/$slug': {
      preLoaderRoute: typeof StatusSlugImport
      parentRoute: typeof rootRoute
    }
    '/survey/add': {
      preLoaderRoute: typeof SurveyAddImport
      parentRoute: typeof SurveyImport
    }
    '/telemetry/$telemetryId': {
      preLoaderRoute: typeof TelemetryTelemetryIdImport
      parentRoute: typeof TelemetryImport
    }
    '/telemetry/add': {
      preLoaderRoute: typeof TelemetryAddImport
      parentRoute: typeof TelemetryImport
    }
    '/website/add': {
      preLoaderRoute: typeof WebsiteAddImport
      parentRoute: typeof WebsiteImport
    }
    '/website/overview': {
      preLoaderRoute: typeof WebsiteOverviewImport
      parentRoute: typeof WebsiteImport
    }
    '/worker/add': {
      preLoaderRoute: typeof WorkerAddImport
      parentRoute: typeof WorkerImport
    }
    '/aiGateway/': {
      preLoaderRoute: typeof AiGatewayIndexImport
      parentRoute: typeof AiGatewayImport
    }
    '/application/': {
      preLoaderRoute: typeof ApplicationIndexImport
      parentRoute: typeof ApplicationImport
    }
    '/feed/': {
      preLoaderRoute: typeof FeedIndexImport
      parentRoute: typeof FeedImport
    }
    '/insights/': {
      preLoaderRoute: typeof InsightsIndexImport
      parentRoute: typeof rootRoute
    }
    '/monitor/': {
      preLoaderRoute: typeof MonitorIndexImport
      parentRoute: typeof MonitorImport
    }
    '/page/': {
      preLoaderRoute: typeof PageIndexImport
      parentRoute: typeof PageImport
    }
    '/survey/': {
      preLoaderRoute: typeof SurveyIndexImport
      parentRoute: typeof SurveyImport
    }
    '/telemetry/': {
      preLoaderRoute: typeof TelemetryIndexImport
      parentRoute: typeof TelemetryImport
    }
    '/worker/': {
      preLoaderRoute: typeof WorkerIndexImport
      parentRoute: typeof WorkerImport
    }
    '/aiGateway/$gatewayId/edit': {
      preLoaderRoute: typeof AiGatewayGatewayIdEditImport
      parentRoute: typeof AiGatewayImport
    }
    '/application/$applicationId/edit': {
      preLoaderRoute: typeof ApplicationApplicationIdEditImport
      parentRoute: typeof ApplicationImport
    }
    '/feed/$channelId/edit': {
      preLoaderRoute: typeof FeedChannelIdEditImport
      parentRoute: typeof FeedImport
    }
    '/feed/public/$shareId': {
      preLoaderRoute: typeof FeedPublicShareIdImport
      parentRoute: typeof rootRoute
    }
    '/invitation/accept/$token': {
      preLoaderRoute: typeof InvitationAcceptTokenImport
      parentRoute: typeof rootRoute
    }
    '/monitor/$monitorId/edit': {
      preLoaderRoute: typeof MonitorMonitorIdEditImport
      parentRoute: typeof MonitorImport
    }
    '/settings/billing/history': {
      preLoaderRoute: typeof SettingsBillingHistoryImport
      parentRoute: typeof SettingsImport
    }
    '/survey/$surveyId/edit': {
      preLoaderRoute: typeof SurveySurveyIdEditImport
      parentRoute: typeof SurveyImport
    }
    '/website/$websiteId/config': {
      preLoaderRoute: typeof WebsiteWebsiteIdConfigImport
      parentRoute: typeof WebsiteImport
    }
    '/website/public/$shareId': {
      preLoaderRoute: typeof WebsitePublicShareIdImport
      parentRoute: typeof rootRoute
    }
    '/website/visitor-map/$websiteId': {
      preLoaderRoute: typeof WebsiteVisitorMapWebsiteIdImport
      parentRoute: typeof rootRoute
    }
    '/worker/$workerId/edit': {
      preLoaderRoute: typeof WorkerWorkerIdEditImport
      parentRoute: typeof WorkerImport
    }
    '/aiGateway/$gatewayId/': {
      preLoaderRoute: typeof AiGatewayGatewayIdIndexImport
      parentRoute: typeof AiGatewayImport
    }
    '/application/$applicationId/': {
      preLoaderRoute: typeof ApplicationApplicationIdIndexImport
      parentRoute: typeof ApplicationImport
    }
    '/feed/$channelId/': {
      preLoaderRoute: typeof FeedChannelIdIndexImport
      parentRoute: typeof FeedImport
    }
    '/insights/warehouse/': {
      preLoaderRoute: typeof InsightsWarehouseIndexImport
      parentRoute: typeof rootRoute
    }
    '/monitor/$monitorId/': {
      preLoaderRoute: typeof MonitorMonitorIdIndexImport
      parentRoute: typeof MonitorImport
    }
    '/settings/billing/': {
      preLoaderRoute: typeof SettingsBillingIndexImport
      parentRoute: typeof SettingsImport
    }
    '/survey/$surveyId/': {
      preLoaderRoute: typeof SurveySurveyIdIndexImport
      parentRoute: typeof SurveyImport
    }
    '/website/$websiteId/': {
      preLoaderRoute: typeof WebsiteWebsiteIdIndexImport
      parentRoute: typeof WebsiteImport
    }
    '/worker/$workerId/': {
      preLoaderRoute: typeof WorkerWorkerIdIndexImport
      parentRoute: typeof WorkerImport
    }
    '/insights/warehouse/connections/create': {
      preLoaderRoute: typeof InsightsWarehouseConnectionsCreateImport
      parentRoute: typeof rootRoute
    }
    '/insights/warehouse/connections/': {
      preLoaderRoute: typeof InsightsWarehouseConnectionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/insights/warehouse/connections/$connectionId/table': {
      preLoaderRoute: typeof InsightsWarehouseConnectionsConnectionIdTableImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AiGatewayRoute.addChildren([
    AiGatewayAddRoute,
    AiGatewayIndexRoute,
    AiGatewayGatewayIdEditRoute,
    AiGatewayGatewayIdIndexRoute,
  ]),
  ApplicationRoute.addChildren([
    ApplicationAddRoute,
    ApplicationCompareRoute,
    ApplicationOverviewRoute,
    ApplicationIndexRoute,
    ApplicationApplicationIdEditRoute,
    ApplicationApplicationIdIndexRoute,
  ]),
  FeedRoute.addChildren([
    FeedAddRoute,
    FeedIndexRoute,
    FeedChannelIdEditRoute,
    FeedChannelIdIndexRoute,
  ]),
  LoginRoute,
  MonitorRoute.addChildren([
    MonitorAddRoute,
    MonitorIndexRoute,
    MonitorMonitorIdEditRoute,
    MonitorMonitorIdIndexRoute,
  ]),
  PageRoute.addChildren([PageSlugRoute, PageAddRoute, PageIndexRoute]),
  PlaygroundRoute,
  RegisterRoute,
  ServerRoute,
  SettingsRoute.addChildren([
    SettingsApiKeyRoute,
    SettingsAuditLogRoute,
    SettingsNotificationsRoute,
    SettingsProfileRoute,
    SettingsUsageRoute,
    SettingsWarehouseRoute,
    SettingsWorkspaceRoute,
    SettingsBillingHistoryRoute,
    SettingsBillingIndexRoute,
  ]),
  SurveyRoute.addChildren([
    SurveyAddRoute,
    SurveyIndexRoute,
    SurveySurveyIdEditRoute,
    SurveySurveyIdIndexRoute,
  ]),
  SwitchWorkspaceRoute,
  TelemetryRoute.addChildren([
    TelemetryTelemetryIdRoute,
    TelemetryAddRoute,
    TelemetryIndexRoute,
  ]),
  WebsiteRoute.addChildren([
    WebsiteAddRoute,
    WebsiteOverviewRoute,
    WebsiteWebsiteIdConfigRoute,
    WebsiteWebsiteIdIndexRoute,
  ]),
  WorkerRoute.addChildren([
    WorkerAddRoute,
    WorkerIndexRoute,
    WorkerWorkerIdEditRoute,
    WorkerWorkerIdIndexRoute,
  ]),
  FeedPlaygroundRoute,
  InsightsCohortsRoute,
  InsightsEventsRoute,
  StatusSlugRoute,
  InsightsIndexRoute,
  FeedPublicShareIdRoute,
  InvitationAcceptTokenRoute,
  WebsitePublicShareIdRoute,
  WebsiteVisitorMapWebsiteIdRoute,
  InsightsWarehouseIndexRoute,
  InsightsWarehouseConnectionsCreateRoute,
  InsightsWarehouseConnectionsIndexRoute,
  InsightsWarehouseConnectionsConnectionIdTableRoute,
])

/* prettier-ignore-end */
